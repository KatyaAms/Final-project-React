{"ast":null,"code":"var _jsxFileName = \"/Users/ekaterina/Documents/Final project-React/src/WeatherForecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./WeatherForecast.css\";\nimport WeatherIcon from \"./WeatherIcon\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WeatherForecast(props) {\n  _s();\n\n  const [loaded, setLoaded] = useState(false);\n  const [forecast, setForecast] = useState(null);\n\n  function forecastResponse(response) {\n    setForecast(response.data);\n    setLoaded(true);\n  }\n\n  if (loaded) {\n    console.log(forecast.list[0].main.temp);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"WeatherForecast\",\n      children: [\"10:00\", /*#__PURE__*/_jsxDEV(WeatherIcon, {\n        code: forecast.list[0].weather[0].icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), Math.round(forecast.list[0].main.temp), \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this);\n  } else {\n    let apiKey = \"cea4eaec36371a8d64cf80cfa988df3d\";\n    let url = `https://api.openweathermap.org/data/2.5/forecast?q=${props.city}&appid=${apiKey}&units=metric`;\n    axios.get(url).then(forecastResponse);\n    return null;\n  }\n}\n\n_s(WeatherForecast, \"20/pdcvQnLtcZUd5Lz9vhTDggVQ=\");\n\n_c = WeatherForecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherForecast\");","map":{"version":3,"sources":["/Users/ekaterina/Documents/Final project-React/src/WeatherForecast.js"],"names":["React","useState","WeatherIcon","axios","WeatherForecast","props","loaded","setLoaded","forecast","setForecast","forecastResponse","response","data","console","log","list","main","temp","weather","icon","Math","round","apiKey","url","city","get","then"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,uBAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAE/C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAoBN,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;;AAGI,WAASS,gBAAT,CAA0BC,QAA1B,EAAmC;AAC/BF,IAAAA,WAAW,CAACE,QAAQ,CAACC,IAAV,CAAX;AACAL,IAAAA,SAAS,CAAE,IAAF,CAAT;AAEH;;AAED,MAAID,MAAJ,EAAW;AACPO,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACO,IAAT,CAAc,CAAd,EAAiBC,IAAjB,CAAsBC,IAAlC;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,uCAEI,QAAC,WAAD;AAAa,QAAA,IAAI,EAAET,QAAQ,CAACO,IAAT,CAAc,CAAd,EAAiBG,OAAjB,CAAyB,CAAzB,EAA4BC;AAA/C;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGCC,IAAI,CAACC,KAAL,CAAWb,QAAQ,CAACO,IAAT,CAAc,CAAd,EAAiBC,IAAjB,CAAsBC,IAAjC,CAHD;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH,GATD,MASK;AAEL,QAAIK,MAAM,GAAC,kCAAX;AACA,QAAIC,GAAG,GAAI,sDAAqDlB,KAAK,CAACmB,IAAK,UAASF,MAAO,eAA3F;AACJnB,IAAAA,KAAK,CAACsB,GAAN,CAAUF,GAAV,EAAeG,IAAf,CAAoBhB,gBAApB;AAEI,WAAO,IAAP;AACH;AACA;;GA7BuBN,e;;KAAAA,e","sourcesContent":["import React, {useState} from 'react';\nimport \"./WeatherForecast.css\"\nimport WeatherIcon from \"./WeatherIcon\"\nimport axios from \"axios\";\n\n\nexport default function WeatherForecast(props) {\n\nconst [loaded, setLoaded]=useState(false);\nconst [forecast, setForecast]=useState(null);\n\n\n    function forecastResponse(response){\n        setForecast(response.data);\n        setLoaded (true);\n        \n    }\n\n    if (loaded){\n        console.log(forecast.list[0].main.temp);\n        return (\n            <div className=\"WeatherForecast\">\n                10:00\n                <WeatherIcon code={forecast.list[0].weather[0].icon}/>\n            {Math.round(forecast.list[0].main.temp)}Â°C\n            </div>\n        );\n    }else{\n\n    let apiKey=\"cea4eaec36371a8d64cf80cfa988df3d\"\n    let url = `https://api.openweathermap.org/data/2.5/forecast?q=${props.city}&appid=${apiKey}&units=metric`;\naxios.get(url).then(forecastResponse);\n\n    return null;\n}\n}"]},"metadata":{},"sourceType":"module"}