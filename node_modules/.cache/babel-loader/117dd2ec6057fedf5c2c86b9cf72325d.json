{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./WeatherForecast.css\";\nimport axios from \"axios\";\nexport default function WeatherForecast(props) {\n  _s();\n\n  const [loaded, setLoaded] = useState(false);\n  const [forecast, setForecast] = useState(null);\n\n  function forecastResponse(response) {\n    setLoaded(true);\n    setForecast(response.data);\n  }\n\n  if (loaded) {\n    console.log(forecast.list[0].main.temp);\n    return \"Loading...\";\n  } else {\n    let apiKey = \"cea4eaec36371a8d64cf80cfa988df3d\";\n    let url = `https://api.openweathermap.org/data/2.5/forecast?q=${props.city}&appid=${apiKey}&units=metric`;\n    axios.get(url).then(forecastResponse);\n    return null;\n  }\n}\n\n_s(WeatherForecast, \"20/pdcvQnLtcZUd5Lz9vhTDggVQ=\");\n\n_c = WeatherForecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherForecast\");","map":{"version":3,"sources":["/Users/ekaterina/Documents/Final project-React/src/WeatherForecast.js"],"names":["React","useState","axios","WeatherForecast","props","loaded","setLoaded","forecast","setForecast","forecastResponse","response","data","console","log","list","main","temp","apiKey","url","city","get","then"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,uBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAE/C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAoBL,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;;AAGI,WAASQ,gBAAT,CAA0BC,QAA1B,EAAmC;AAC/BJ,IAAAA,SAAS,CAAE,IAAF,CAAT;AACAE,IAAAA,WAAW,CAACE,QAAQ,CAACC,IAAV,CAAX;AACH;;AAED,MAAIN,MAAJ,EAAW;AACPO,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACO,IAAT,CAAc,CAAd,EAAiBC,IAAjB,CAAsBC,IAAlC;AACA,WAAO,YAAP;AACH,GAHD,MAGK;AAEL,QAAIC,MAAM,GAAC,kCAAX;AACA,QAAIC,GAAG,GAAI,sDAAqDd,KAAK,CAACe,IAAK,UAASF,MAAO,eAA3F;AACJf,IAAAA,KAAK,CAACkB,GAAN,CAAUF,GAAV,EAAeG,IAAf,CAAoBZ,gBAApB;AAEI,WAAO,IAAP;AACH;AACA;;GAtBuBN,e;;KAAAA,e","sourcesContent":["import React, {useState} from 'react';\nimport \"./WeatherForecast.css\"\nimport axios from \"axios\";\n\n\nexport default function WeatherForecast(props) {\n\nconst [loaded, setLoaded]=useState(false);\nconst [forecast, setForecast]=useState(null);\n\n\n    function forecastResponse(response){\n        setLoaded (true);\n        setForecast(response.data);\n    }\n\n    if (loaded){\n        console.log(forecast.list[0].main.temp);\n        return \"Loading...\";\n    }else{\n\n    let apiKey=\"cea4eaec36371a8d64cf80cfa988df3d\"\n    let url = `https://api.openweathermap.org/data/2.5/forecast?q=${props.city}&appid=${apiKey}&units=metric`;\naxios.get(url).then(forecastResponse);\n\n    return null;\n}\n}"]},"metadata":{},"sourceType":"module"}